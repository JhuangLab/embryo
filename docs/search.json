[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spatiotemporal Metabolic Atlas of Mammalian Organogenesis",
    "section": "",
    "text": "Preface\nOrganogenesis in mammals involves a highly orchestrated series of spatially and temporally regulated cellular processes. These processes are tightly coupled to transcriptional networks and metabolic pathways, but how these factors cooperately drive complex morphogenesis remains poorly understood. Here, we constructed spatiotemporal transcriptional networks and a comprehensive metabolic atlas to delineate the dynamic metabolic landscape during organogenesis. Integrated analysis revealed that each organ acquired specific metabolic features, with the liver and brain exhibiting particularly pronounced specifications. This organ-specific metabolism emerges progressively from an initially homogeneous metabolic pattern distributed across the entire embryo. Within the organs, we identified a series of spatially organized metabolic patterns, gradients or niches in the developing somite or brain, which were often aligned with signaling pathways or cell fate transitions. Comparative analysis of mouse and human embryo organ development demonstrated that mouse embryos, undergo more rapid organ-level metabolic specification than human embryos, consistent with their developmental pace.\nCollectively, these findings highlight the spatiotemporal heterogeneity of organ-level metabolism and underscore the fundamental roles of metabolic specification in mammalian organogenesis. .",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "welcome.html",
    "href": "welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Reproducible research\nAnother goal of this book is to help readers to make our result reproducible. The hope is to get readers can reproduce most of our results. For genomics and bioinformatics specialists, we prioritize reproducibility. A companion book will accompany the article, detailing bioinformatics workflows, including data preprocessing, analytical pipelines, software versions, and parameter settings. This resource ensures transparency and enables precise replication of our computational methods.\nBy addressing these diverse audiences, our work bridges clinical practice, computational reproducibility, and mechanistic research, advancing the diagnosis, treatment, and understanding of multiple myeloma in Chinese populations.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "To begin, I assume that you have read through our paper. In the chapters of this book, I present the key components of this study, encompassing the full analytical workflow from data collection to result interpretation. Particular emphasis is placed on the major findings of the research. I hope this book offers useful insights for readers and also contributes, in a small way, to the broader reproducibility community.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "datasets.html",
    "href": "datasets.html",
    "title": "1  Datasets from the first hospital of Jilin University",
    "section": "",
    "text": "This dataset was newly curated for the current study and originates from The First Hospital of Jilin University. Sample collection spanned from 2017 through the end of 2023. The dataset includes 156 RNA-seq and 84 whole-genome sequencing (WGS) datasets derived from 135 individuals, and is expected to reflect the characteristics of Chinese or broader Asian populations to some extent.\nAmong the collected samples, there are 186 baseline (newly diagnosed) cases, 29 first relapse samples, 17 post-treatment (remission) cases, and 8 others. A total of 202 samples were purified CD138⁺ bone marrow cells, and 38 samples of paired PBMCs were also included, covering multiple clinical timepoints and sample types.\nFollowing Jonathan J. Keats’ recommendation, we sequenced whole-genome sequencing (WGS) data to &gt;90x coverage for tumor samples and &gt;30x for matched normals. Typically, 100 Gb corresponds to just over 30x coverage, which may suffice for copy number variation (CNV) analysis in some myeloma samples but is underpowered for detecting structural variants and mutations. Additionally, for mRNA sequencing, we targeted approximately 100 million reads per patient to account for the fact that ~50% of RNA derives from immunoglobulin production, ensuring robust gene expression profiling.\nIn addition, we generated single-cell RNA-seq data from two IgD-type MM samples at The First Hospital of Jilin University. These new data were assembled with public single-cell RNA-seq datasets of MM samples from multiple sources. All single-cell datasets were processed using a standardized pipeline to ensure consistent integration and quality control.",
    "crumbs": [
      "Data Collection",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Sets</span>"
    ]
  },
  {
    "objectID": "reduce_dim.html",
    "href": "reduce_dim.html",
    "title": "\n4  Dimensionality Reduction\n",
    "section": "",
    "text": "4.1 PCA figure",
    "crumbs": [
      "Unsupervised cluster",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reduce Dim</span>"
    ]
  },
  {
    "objectID": "reduce_dim.html#pca-figure",
    "href": "reduce_dim.html#pca-figure",
    "title": "\n4  Dimensionality Reduction\n",
    "section": "",
    "text": "PCA plot .",
    "crumbs": [
      "Unsupervised cluster",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reduce Dim</span>"
    ]
  },
  {
    "objectID": "reduce_dim.html#tsne-figure",
    "href": "reduce_dim.html#tsne-figure",
    "title": "\n4  Dimensionality Reduction\n",
    "section": "\n4.2 tSNE figure",
    "text": "4.2 tSNE figure\n\n\ntSNE plot.",
    "crumbs": [
      "Unsupervised cluster",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reduce Dim</span>"
    ]
  },
  {
    "objectID": "reduce_dim.html#umap-figure",
    "href": "reduce_dim.html#umap-figure",
    "title": "\n4  Dimensionality Reduction\n",
    "section": "\n4.3 UMAP figure",
    "text": "4.3 UMAP figure\n\n\nUMAP plot after batch correction.\n\n\n\n\nPCA plot .\ntSNE plot.\nUMAP plot after batch correction.",
    "crumbs": [
      "Unsupervised cluster",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reduce Dim</span>"
    ]
  },
  {
    "objectID": "drug.html",
    "href": "drug.html",
    "title": "\n5  Treatment status in this study\n",
    "section": "",
    "text": "5.1 Treatment response groups and related functions\nWe applied consistent criteria to classify treatment responses in both the CoMMpass and Jilin datasets. Patients were grouped into seven response categories: stringent complete response (sCR), complete response (CR), very good partial response (VGPR), partial response (PR), minimal response (MR), stable disease (SD), and progressive disease (PD). For analysis, we designated sCR and CR as the best response group, and SD and PD as the poor response group, aiming to exclude ambiguous responses and maximize the contrast between the two groups for the identification of potentially response-associated biological functions.\nsinfo_pionly_fil &lt;- sinfo_pionly[sinfo_pionly$best_response %in% c(\"sCR\", \"CR\", \"SD\", \"PD\"), ]\nsinfo_pionly_fil$group &lt;- ifelse(sinfo_pionly_fil$best_response %in% c(\"sCR\", \"CR\"), \"best\", \"worst\")\ncounts_pionly_fil &lt;- counts_merged[, sinfo_pionly_fil$sample_id]\n\n\ndds_pi_part &lt;- DESeqDataSetFromMatrix(counts_pionly_fil, sinfo_pionly_fil, ~ rna_type + group)\nkeep &lt;- rowSums(counts(dds_pi_part) &gt;= 5) &gt; ceiling(0.2 * ncol(dds_pi_part))  \ndds_pi_part &lt;- dds_pi_part[keep, ]\nkeep2 &lt;- rowSums(counts(dds_pi_part) == 0) &lt; ceiling(0.5 * ncol(dds_pi_part))\ndds_pi_part &lt;- dds_pi_part[keep2, ]\ndds_pi_part &lt;- DESeq(dds_pi_part)\n\n\nres_pi_part &lt;- add_col(results(dds_pi_part, c(\"group\", \"worst\", \"best\")))\nres_pi_part_fil &lt;- as.data.frame(res_pi_part)[res_pi_part$pvalue &lt; 0.05, ] %&gt;% na.omit()\nGSEAinput_pi2 &lt;- res_pi_part$log2FoldChange\nnames(GSEAinput_pi2) &lt;- as.character(rownames(res_pi_part))\nGSEAinput_pi2 &lt;- sort(GSEAinput_pi2, decreasing = TRUE)\ngseGOres_pi2_part &lt;- gseGO(GSEAinput_pi2, OrgDb = org.Hs.eg.db, keyType = \"SYMBOL\", ont = \"BP\",\n                           minGSSize = 5, maxGSSize = 200, pvalueCutoff = 0.2)\n\n\n# use batch-corrected exp data (limma)\nmm1330 &lt;- read_rds(\"~/projects/mm/analysis/meta/human/rnaseq/exp/mm1330.rds\") \nexp_mm &lt;- mm1330[, -2] %&gt;% left_join(hugo_anno) %&gt;% na.omit() %&gt;% \n  dplyr::select(-c(gene_id, locus_group)) %&gt;% as.data.frame() %&gt;% remove_rownames() %&gt;% \n  column_to_rownames(var = \"symbol\") %&gt;% as.matrix()\nexp_pi_part &lt;- exp_mm[, sinfo_pionly_fil$sample_id]\npi_group_part &lt;- factor(sinfo_pionly_fil$group)\nfit &lt;- lmFit(exp_pi_part, model.matrix(~ pi_group_part))\nfit &lt;- eBayes(fit)\nresults_pi_part &lt;- add_col2(topTable(fit, coef = 2, number = Inf, adjust.method = \"BH\"))\nresults_pi_part_fil &lt;- results_pi_part[results_pi_part$P.Value &lt; 0.05, ]\n\nGSEA_input_pi_limma &lt;- results_pi_part$logFC\nnames(GSEA_input_pi_limma) &lt;- as.character(rownames(results_pi_part))\nGSEA_input_pi_limma &lt;- sort(GSEA_input_pi_limma, decreasing = TRUE)\ngseGO_res_pi_part_limma &lt;- gseGO(GSEA_input_pi_limma, OrgDb = org.Hs.eg.db, keyType = \"SYMBOL\", ont = \"BP\",\n                                 minGSSize = 5, maxGSSize = 200, pvalueCutoff = 0.2)\nGiven the presence of batch effects and underlying subtype heterogeneity, we first assessed the impact of potential confounding factors by applying two complementary approaches: DESeq2 (correcting for sequencing platform only) and limma (applied to expression data with batch effects removed). Functional analysis of the resulting differential expression outputs revealed highly concordant results between the two methods, suggesting that batch effects and subtype differences had limited impact under these conditions.\nccres &lt;- compareCluster(geneCluster = list(pi_deseq2 = GSEAinput_pi2, pi_limma = GSEA_input_pi_limma, \n                                           tri_deseq2 = GSEAinput_tri, tri_limma = GSEA_input_tri2_limma),\n                        fun = gseGO, OrgDb = org.Hs.eg.db, keyType = \"SYMBOL\", ont = \"BP\",\n                        minGSSize = 4, maxGSSize = 200, pvalueCutoff = 0.1)\npdf(\"four_comp.pdf\", width = 8, height = 10)\ndotplot(ccres)\ndev.off()\nWe next included the IMiD-based samples in our analysis and compared the resulting functional enrichment outcomes. Notably, sister chromatid separation consistently emerged as one of the most significantly enriched biological processes. This result was further validated using the Jilin dataset independently, indicating that this pathway exhibits robust differences across datasets and treatment regimens. Aberrations in sister chromatid separation can lead to aneuploidy, a hallmark of MM, and may offer insights into mechanisms of drug resistance.\nSubsequently, we investigated gene expression patterns associated with treatment response.\n# match gene expression pattern to drug response groups\nexp_resp &lt;- exp_mm[, resp_fil$sample_id]\ny7 &lt;- resp_fil$group\ntrend_p &lt;- apply(exp_resp, 1, \\(g) cor.test(g, as.numeric(y7), method = \"spearman\")$p.value )\ncand_genes &lt;- names(head(sort(trend_p), 200))\n\n# plot\nresp_colors &lt;- c(\"sCR\" = \"#F4E0FA\", \"CR\" = \"#E4E2F8\", \"VGPR\" = \"#9163C1\", \"PR\" = \"#F6D7ED\",\n                 \"MR\" = \"#FEF2F2\", \"SD\" = \"#F7F2FE\", \"PD\" = \"#E0ECFA\")\ntreat_colors &lt;- RColorBrewer::brewer.pal(4, \"Set1\")\nexp_long &lt;- exp_resp %&gt;% as.data.frame() %&gt;% rownames_to_column(\"gene\") %&gt;%\n  pivot_longer(-gene, names_to = \"sample_id\", values_to = \"expression\")\nplot_data &lt;- left_join(exp_long, resp_fil)\nNo single gene was found to be strongly correlated with drug response. While certain genes showed modest expression trends corresponding to treatment efficacy, these patterns were insufficient to support predictive use. An example of such gene-level expression is illustrated below:\ncand_gene &lt;- \"CPSF7\"\n gene_df &lt;- plot_data[plot_data$gene %in% cand_gene, ]\n  p &lt;- ggplot(gene_df, aes(x = group, y = expression)) +\n    geom_boxplot(aes(fill = group), outlier.shape = NA, alpha = 0.7) +\n    geom_jitter(aes(color = treatment_group), width = 0.2, size = 1.5) +\n    scale_fill_manual(values = resp_colors) +\n    scale_color_manual(values = treat_colors) +\n    labs(title = cand_gene, x = NULL, y = \"Expression\") +\n    theme_cowplot() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n  ggsave(paste0(\"exp_plots/boxplot_\", cand_gene, \".pdf\"), plot = p, width = 6, height = 4)",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Treatment Response</span>"
    ]
  },
  {
    "objectID": "drug.html#treatment-response-groups-and-related-functions",
    "href": "drug.html#treatment-response-groups-and-related-functions",
    "title": "\n5  Treatment status in this study\n",
    "section": "",
    "text": "Functional differences between worst and best responders.\n\n\n\n\nConsistent functional differences across individual datasets.\n\n\n\n\n\n\n\nExample gene with expression changes.\n\n\n\n\nFunctional differences between worst and best responders.\nConsistent functional differences across individual datasets.\nExample gene with expression changes.",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Treatment Response</span>"
    ]
  },
  {
    "objectID": "mmyelomap.html",
    "href": "mmyelomap.html",
    "title": "\n6  The MMyeloMap R package\n",
    "section": "",
    "text": "To distill the key patterns embedded in the large-scale transcriptomic dataset generated in this study and to support downstream research, we developed multiple predictive models based on diverse machine learning algorithms. These models were trained on the integrated dataset described in this work. To assess their performance and identify the most reliable classifier for subtype prediction, we incorporated an independent external cohort and processed it using the same analytical pipeline. Predictions from each model were compared against subtype assignments derived from standard clustering procedures. This comparison enabled the identification of the optimal model, which demonstrated high predictive accuracy. Building on these results, we assembled a suite of molecular profiling tools for multiple myeloma (MM), which have been packaged into an R toolkit, MMyeloMap, supporting comprehensive, single-sample subtype inference.\nBy using expression quantification results generated via Salmon as input, a comprehensive sample prediction report can be obtained by running the following code. Selected components of the report are illustrated in the subsequent sections:\n\nlibrary(MMyeloMap)\ntestpath &lt;- path_package(\"MMyeloMap\", \"extdata/files/quant.sf.gz\")\nfs::dir_create(\"test\")\ngenerate_qmd_from_template(testpath,\n                           \"pmm03\", \n                           \"test/out.qmd\")\n\nBased on transcriptomic features, predicted subtypes were inferred and visualized using an interpolated heatmap, as shown below:\n\n\nInterpolated heatmap of newly added sample\n\nThe UMAP visualization of the sample distribution is shown below, with the queried sample marked by a cross (✕):\n\n\nUMAP visualization of new sample\n\nThe following figure displays the key features contributing to the relapse prediction model:\n\n\nSubtype prediction of new sample\n\nIn addition to analyzing differences between primary and relapsed samples (see the DEG section for example), we also aimed to predict the future risk of relapse using baseline transcriptomic features. Known samples were split into training and testing sets to train a predictive model. The example code and resulting performance are shown below:\n\npkgs &lt;- c(\"fs\", \"futile.logger\", \"configr\", \"stringr\", \"ggpubr\", \"ggthemes\",\n          \"jhtools\", \"glue\", \"ggsci\", \"patchwork\", \"tidyverse\", \"dplyr\", \n          \"SummarizedExperiment\", \"jhuanglabRNAseq\", \"DESeq2\", \"maftools\", \n          \"matrixStats\", \"Matrix\", \"furrr\", \"ComplexHeatmap\", \"caret\", \n          \"glmnet\", \"pROC\", \"ranger\")\nfor (pkg in pkgs){\n  suppressPackageStartupMessages(library(pkg, character.only = T))\n} \n\n# load data\nsetwd(\"/cluster/home/yjliu_jh/projects/mm/output/relapse_prediction\")\nmerged_sinfo &lt;- read_rds(\"~/projects/mm/docs/meta/sampleinfo/sampleinfo_jilin_commpass.rds\")\nmm1330 &lt;- read_rds(\"~/projects/mm/analysis/meta/human/rnaseq/exp/mm1330.rds\") \n\n# load new gene symbol info \nhugo_anno &lt;- readr::read_delim(\"/cluster/home/yjliu_jh/projects/mm/data/hgnc_complete_set.txt\",\n                               col_types = cols(intermediate_filament_db = col_character()))\nhugo_anno &lt;- hugo_anno[, c(\"symbol\", \"ensembl_gene_id\", \"locus_group\")] %&gt;% as.data.frame() \ncolnames(hugo_anno)[2] &lt;- \"gene_id\"\nexp_mm &lt;- mm1330[, -2] %&gt;% left_join(hugo_anno) %&gt;% na.omit() %&gt;% \n  dplyr::select(-c(gene_id, locus_group)) %&gt;% as.data.frame() %&gt;% remove_rownames() %&gt;% \n  column_to_rownames(var = \"symbol\") %&gt;% as.matrix()\n\n# select primary samples and divide them based on recurrence\nsinfo_commpass &lt;- merged_sinfo[merged_sinfo$batch %in% \"commpass\", ]\nsinfo_commpass$patient_id &lt;- substr(sinfo_commpass$sample_id, 1, 9)\nsinfo_c_fil &lt;- sinfo_commpass[!grepl(\"PB\", sinfo_commpass$sample_id), ]\ndup_patients &lt;- intersect(sinfo_c_fil$patient_id[sinfo_c_fil$tumor_descriptor %in% c(\"primary\", \"Primary\")], sinfo_c_fil$patient_id[sinfo_c_fil$tumor_descriptor %in% \"recurrence\"])\nsinfo_commpass2 &lt;- sinfo_c_fil[sinfo_c_fil$patient_id %in% dup_patients, c(\"sample_id\", \"patient_id\", \"tumor_descriptor\")]\nsinfo_commpass2 &lt;- sinfo_commpass2[sinfo_commpass2$tumor_descriptor %in% \"primary\", ]\n\nsinfo_jilin &lt;- merged_sinfo[merged_sinfo$batch %in% \"jilin\", c(\"sample_id\", \"cn_name\", \"tumor_descriptor\")] %&gt;% unique()\nsinfo_jilin2 &lt;- sinfo_jilin[sinfo_jilin$tumor_descriptor %notin% \"initial_treating\", ]\ntemp_count &lt;- sinfo_jilin2 %&gt;% group_by(cn_name) %&gt;% summarise(c = length(unique(tumor_descriptor)))\ntemp_patients &lt;- temp_count$cn_name[temp_count$c &gt; 1]\nsinfo_jilin2 &lt;- sinfo_jilin2[sinfo_jilin2$cn_name %in% temp_patients & sinfo_jilin2$tumor_descriptor %in% \"primary\", ]\nsinfo_jilin3 &lt;- sinfo_jilin2[!duplicated(sinfo_jilin2[, 2:3]), ] %&gt;% as.data.frame()\nsinfo_jilin3 &lt;- sinfo_jilin3[order(sinfo_jilin3$cn_name, sinfo_jilin3$tumor_descriptor), ]\njilin_extra &lt;- anti_join(sinfo_jilin2, sinfo_jilin3)$sample_id\n\nextra_set &lt;- merged_sinfo$sample_id[merged_sinfo$datasets %in% \"EGAD00001007813\" & merged_sinfo$tumor_descriptor %in% \"primary\"]\n\n# set metadata\nall_relapse_samples &lt;- c(sinfo_commpass2$sample_id, sinfo_jilin3$sample_id, extra_set)\nsinfo_fil &lt;- merged_sinfo[merged_sinfo$datasets %in% c(\"jilin\", \"commpass\", \"EGAD00001007813\") & merged_sinfo$tumor_descriptor %in% c(\"primary\", \"Primary\"), ]\nsinfo_fil &lt;- sinfo_fil[sinfo_fil$sample_id %in% colnames(mm1330), ]\nsinfo_fil$relapse_status &lt;- ifelse(sinfo_fil$sample_id %in% c(all_relapse_samples, jilin_extra), \"relapse\", \"non-relapse\")\n\n# === RF model ===\n\nrelapse_samples &lt;- sample(sinfo_fil$sample_id[sinfo_fil$relapse_status %in% \"relapse\"], 72)\nremaining_samples &lt;- c(setdiff(all_relapse_samples, relapse_samples), jilin_extra)\nall_baseline_samples &lt;- setdiff(sinfo_fil$sample_id, c(all_relapse_samples, jilin_extra))\nbaseline_samples &lt;- sample(all_baseline_samples, 800)\nremaining_baseline &lt;- setdiff(all_baseline_samples, baseline_samples)\n\nexp_mm_fil &lt;- exp_mm[, c(baseline_samples, relapse_samples)]\nexp_mm_fil &lt;- as.data.frame(exp_mm_fil) %&gt;% dplyr::arrange(desc(rowVars(exp_mm_fil)))\nhvg &lt;- rownames(exp_mm_fil)[1:750]\nexp_diff &lt;- rowMeans(exp_mm_fil[, baseline_samples]) - rowMeans(exp_mm_fil[, relapse_samples])\ndfg &lt;- names(tail(sort(abs(exp_diff)), 250))\n\nnames_info &lt;- data.frame(ori_names = rownames(exp_mm))\nnames_info$new_names &lt;- colnames(janitor::clean_names(t(exp_mm)))\n\nexp_t &lt;- as.data.frame(t(exp_mm_fil[unique(c(hvg, dfg)), ]))\nexp_t$sample_id &lt;- rownames(exp_t)\nexpr_cols &lt;- setdiff(colnames(exp_t), \"sample_id\")\n# covariates &lt;- c(\"subtypes\", \"age\", \"gender\", \"Clinical_IgH\", \"iss_stage\")  \n# feature_cols &lt;- c(expr_cols, covariates)    ## doesn't work after tests, remove for convenience\nfeature_cols &lt;- expr_cols\n\ndata_all &lt;- left_join(exp_t, sinfo_fil[, c(\"sample_id\", \"relapse_status\")], by = \"sample_id\")\nx &lt;- data_all[, feature_cols]\ny &lt;- as.factor(data_all$relapse_status)\nx &lt;- janitor::clean_names(x)\n\nrf_model &lt;- ranger::ranger(  ## may go further on parameter selection\n  formula = relapse_status ~ .,\n  data = cbind(relapse_status = y, x),\n  probability = TRUE,               \n  importance = \"impurity\", ## based on Gini impurity \n  num.trees = 2000\n)\n\n# test_other &lt;- merged_sinfo$sample_id[merged_sinfo$datasets %in% \"bmc\" & merged_sinfo$tumor_descriptor %in% \"primary\"] %&gt;% sample(10)\nexp_new &lt;- exp_mm[, intersect(c(remaining_samples, remaining_baseline), colnames(exp_mm))]\n\nexp_new_t &lt;- as.data.frame(t(exp_new))\nexp_new_t$sample_id &lt;- rownames(exp_new_t)\nexp_new_t &lt;- left_join(exp_new_t, merged_sinfo[, c(\"sample_id\", covariates)], by = \"sample_id\")\nexp_new_t &lt;- janitor::clean_names(exp_new_t)\n\nnew_pred &lt;- predict(rf_model, data = exp_new_t)$predictions\ny_new &lt;- sinfo_fil$relapse_status[match(colnames(exp_new), sinfo_fil$sample_id)]\n\ncbind(new_pred, y_new)\nroc_obj &lt;- roc(factor(y_new), new_pred[, 1])\n\n\n\npdf(\"rf_test.pdf\", width = 5, height = 4)\nplot(roc_obj, print.auc = TRUE, main = \"Relapse Prediction ROC\")\ndev.off()\n\nvarimp &lt;- sort(rf_model$variable.importance, decreasing = TRUE)\ntop_features &lt;- head(varimp, 30)\nnames(top_features) &lt;- names_info$ori_names[match(names(head(varimp, 30)), names_info$new_names)]\n\n\npdf(\"rf_top_features.pdf\", width = 7, height = 6)\nggplot(data.frame(Feature = names(top_features), Importance = top_features),\n       aes(x = reorder(Feature, Importance), y = Importance)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Top 30 Important Features\", x = \"\", y = \"Importance\")\ndev.off()\n\nThe ROC visualization:\n\n\nSubtype prediction of new sample\n\nTop genes contributing to the prediction model:\n\n\nSubtype prediction of new sample\n\n\n\n\nInterpolated heatmap of newly added sample\nUMAP visualization of new sample\nSubtype prediction of new sample\nSubtype prediction of new sample\nSubtype prediction of new sample",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>The Mmyelomap R package</span>"
    ]
  },
  {
    "objectID": "fig1.html",
    "href": "fig1.html",
    "title": "\n7  Figure 1\n",
    "section": "",
    "text": "7.1 Figure 1",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Figure 1</span>"
    ]
  },
  {
    "objectID": "fig1.html#figure-1",
    "href": "fig1.html#figure-1",
    "title": "\n7  Figure 1\n",
    "section": "",
    "text": "7.1.1 Refined molecular subtypes of MM\nBelow is the code generating Figure 1B:\n\npkgs &lt;- c(\"fs\", \"futile.logger\", \"configr\", \"ggpubr\", \"ggthemes\",\n          \"jhtools\", \"glue\", \"ggsci\", \"patchwork\", \"tidyverse\",\n          \"circlize\", \"ComplexHeatmap\", \"GenomicRanges\",\n          \"jhuanglabRNAseq\", \"ggh4x\")\nfor (pkg in pkgs){\n  suppressPackageStartupMessages(library(pkg, character.only = T))\n}\nproject &lt;- \"mm\"\ndataset &lt;- \"meta\"\nspecies &lt;- \"human\"\nworkdir &lt;- glue(\"~/projects/{project}/analysis/{dataset}/{species}/figures/heatmap\") |&gt; checkdir()\nsetwd(workdir)\nseeds &lt;- 2023\n\ndf &lt;- \"/cluster/home/jhuang/projects/mm/docs/meta/sampleinfo/sampleinfo_jilin_commpass.rds\" %&gt;%\n  read_rds\ndf &lt;- df %&gt;% mutate(PrimaryCluster_bk = PrimaryCluster,\n                    PrimaryCluster = case_when(\n                      PrimaryCluster_bk == \"new_cluster1\" ~ \"HRD\",\n                      PrimaryCluster_bk == \"IgD_like\" ~ \"IgD\",\n                      T ~ PrimaryCluster_bk\n                    ))\njinlin_commpass_heatmap_only &lt;- \"/cluster/home/jhuang/projects/mm/analysis/meta/human/rnaseq/exp/jinlin_commpass_heatmap_only.rds\" %&gt;% read_rds\n# 这个东西反正应该是mm1199，可能要改一下\nmm1199 &lt;- \"/cluster/home/jhuang/projects/mm/analysis/meta/human/rnaseq/exp/mm1199.rds\" %&gt;%\n  read_rds() |&gt; convert_df_plot()\ncogene &lt;- base::intersect(rownames(mm1199), rownames(jinlin_commpass_heatmap_only))\n\nsubdf &lt;- tibble(\n  sample_id = colnames(mm1199)\n) %&gt;%\n  left_join(df)\nsubdf$IRF4_mut &lt;- subdf$irf4_pos == 394972\n\n\n\nconfig_fn = \"/cluster/home/jhuang/projects/mm/analysis/jilin/human/rnaseq/configs/colors.yaml\"\nconfig_list &lt;- show_me_the_colors(config_fn, \"all\")\n\ncol &lt;- config_list[c(\n  \"batch\",\"Clinical_IgH\", \"RNA_Subtype_Name\",\n  \"PrimaryCluster\", \"Tx_MAF\",\"Tx_MAFA\",\"Tx_MAFB\",\n  \"Tx_CCND1\", \"Tx_CCND2\", \"Tx_CCND3\", \"Tx_NSD2\"\n)]\ncol$Dom_IgH_Type &lt;- col$Clinical_IgH\nnames(col$Dom_IgH_Type) &lt;- c(\"IGHE\", \"IGHA\", \"IGHD\", \"IGHG\", \"IGHM\", \"others\")\ncol$PrimaryCluster &lt;- c(col$PrimaryCluster, \"IgD\" = \"#FF00FF\")\ncol$datasets &lt;- c(col$batch, \"EGAD00001007813\" = \"green\", \"angang\" = \"red\")\ncol$IRF4_mut &lt;- c(\"TRUE\" = \"#DC143C\" , \"FALSE\" = \"grey\")\ncol$subtypes &lt;- jhuanglabRNAseq:::inner_group_colors(12)\nnames(col$subtypes) &lt;- subdf$subtypes |&gt; unique() |&gt; na.omit()\nall_scores &lt;- c(\n  \"Zhan_et_al_CD-1\",\"Zhan_et_al_CD-2\",\"Zhan_et_al_HP\",\"Zhan_et_al_LB\",\"Zhan_et_al_MF\",\n  \"Zhan_et_al_MS\",\"Zhan_et_al_PR\",\"Broyl_et_al_MF\",\"Broyl_et_al_CTA\",\"Broyl_et_al_CD2\",\n  \"Broyl_et_al_LB\",\"Broyl_et_al_Myeloid\",\"Broyl_et_al_CD1\",\"Broyl_et_al_MS\",\"Broyl_et_al_PR\",\n  \"Broyl_et_al_HP\",\"Broyl_et_al_NFKB\",\"Broyl_et_al_PRL3\",\"GEP70\",\"Sheri_et_al_MAF\",\n  \"Sheri_et_al_CD1\",\"Sheri_et_al_CD2a\",\"Sheri_et_al_CD2b\",\"Sheri_et_al_MS\",\n  \"Sheri_et_al_1q gain\",\"Sheri_et_al_PR\",\"Sheri_et_al_HRD, MYC, low NFkB\",\n  \"Sheri_et_al_Low purity\",\"Sheri_et_al_HRD, low TP53\",\"Sheri_et_al_HRD, ++15\",\n  \"Sheri_et_al_HRD, ++15, MYC\"\n)\nall_cnvs &lt;- c(\n  \"chr1p_fish\",  \"chr1q_fish\",\n  \"chr3p_fish\",\"chr3q_fish\",\n  \"chr5p_fish\",\"chr5q_fish\",\n  \"chr7p_fish\",\"chr7q_fish\",\n  \"chr9p_fish\",\"chr9q_fish\",\n  \"chr11p_fish\",\"chr11q_fish\",\n  \"chr14q_fish\",\"chr13q_fish\",\n  \"chr15q_fish\",\n  \"chr17q_fish\",\n  \"chr19p_fish\",\"chr19q_fish\",\n  \"chr21_fish\",\"chr21q_fish\")\nfor(i in all_scores){\n  col[[i]] &lt;- circlize::colorRamp2(quantile(subdf[[i]], c(0.1,0.5,0.9), na.rm = T), colors = c(\"#1E90FF\", \"white\", \"#DC143C\"))\n}\nfor(i in all_cnvs){\n  col[[i]] &lt;- c(\"-1\"=\"#1E90FF\", \"0\"=\"white\", \"1\"=\"#DC143C\")\n}\n\nout_dir &lt;- \"./check_new_cluster_addsamples/ljp/fixed_samples\" %&gt;% checkdir\nall_col &lt;- c(\"datasets\",\n             \"Dom_IgH_Type\", \"Clinical_IgH\",\"subtypes\", \"PrimaryCluster\",\"RNA_Subtype_Name\", \"IRF4_mut\",\"GEP70\",\n             \"Tx_MAF\",\"Tx_MAFA\",\"Tx_MAFB\", \"Tx_CCND1\", \"Tx_CCND2\", \"Tx_CCND3\", \"Tx_NSD2\",\n             all_cnvs,\n             all_scores)\nhasub2 &lt;- HeatmapAnnotation(df = subdf[,all_col] %&gt;%\n                              as.data.frame(),\n                            annotation_name_side = \"left\",\n                            show_legend = all_col %in% c(\"datasets\", \"Dom_IgH_Type\",\"subtypes\",\n                                                         \"Clinical_IgH\", \"PrimaryCluster\",\n                                                         \"RNA_Subtype_Name\"),\n                            col = col)\nquick_heatmap(mm1199[cogene,subdf$sample_id], hasub2, outdir = out_dir,\n              hdf = subdf[,c(\"sample_id\",\"cn_name\",\"PrimaryCluster\",\"RNA_Subtype_Name\", \"tumor_descriptor\", \"Tx_CCND1\", \"Tx_CCND2\", \"Tx_CCND3\")] %&gt;%\n                mutate(\n                  CCNDx = Tx_CCND1|Tx_CCND2|Tx_CCND3,\n                  cn_name = case_when(\n                    is.na(cn_name) ~ str_extract(sample_id, pattern = \"MMRF_\\\\d+|MM\\\\d+\"),\n                    T ~ cn_name\n                  )\n                ) %&gt;%\n                dplyr::select(-c(Tx_CCND1, Tx_CCND2, Tx_CCND3)),\n              top_var_percent = 0.95,\n              keep_annotation = T,\n              column_split = 5,\n              height = 20,\n              out_put_rds = T,\n              cluster_columns = T,\n              show_column_names= F)\n\n# objht &lt;- \"/cluster/home/ztao_jh/projects/mm/analysis/meta/human/figures/heatmap/check_new_cluster_addsamples/ljp/fixed_samples/heatmap_0.95_groups5.rds\" |&gt;\n#   read_rds\nobjht &lt;- \"/cluster/home/ztao_jh/projects/mm/analysis/meta/human/figures/heatmap/check_new_cluster_addsamples/ljp/fixed_samples/heatmap_0.95_groups5.rds\" %&gt;%\n  read_rds\nall_col &lt;- all_col |&gt; unique()\nsubdf2 &lt;- tibble::tibble(\n  sample_id = rownames(objht$heatmap2[[6]])\n) |&gt; left_join(subdf[,c(all_col, \"sample_id\")]) |&gt;\n  dplyr::select(-sample_id)\nhasub2 &lt;- HeatmapAnnotation(df = subdf2 %&gt;%\n                              as.data.frame(),\n                            annotation_name_side = \"left\",\n                            show_legend = all_col %in% c(\"datasets\", \"Dom_IgH_Type\",\"subtypes\",\n                                                         \"Clinical_IgH\", \"PrimaryCluster\",\n                                                         \"RNA_Subtype_Name\"),\n                            col = col)\nht &lt;- Heatmap(t(objht$heatmap2[[6]]),\n              show_column_names = F,\n              show_row_names = F,\n              top_annotation = hasub2,\n              border = T,\n              column_gap = unit(0, \"mm\"),\n              clustering_method_columns = \"ward.D2\",\n              clustering_method_rows = \"ward.D2\",\n              column_split = subdf2$subtypes)\n\npdf(\"/cluster/home/ztao_jh/projects/mm/analysis/meta/human/figures/heatmap/check_new_cluster_addsamples/ljp/fixed_samples/split_subtypes.pdf\",\n    width = 20, height = 20)\ndraw(ht, annotation_legend_side = \"left\",\n     heatmap_legend_side = \"right\")\ndev.off()\n\nplot:\n\n7.1.2 Transcriptomic similarities of MM samples used in this study\ncode:\n\npkgs &lt;- c(\"fs\", \"futile.logger\", \"configr\", \"ggpubr\", \"ggthemes\",\n          \"jhtools\", \"glue\", \"ggsci\", \"patchwork\", \"tidyverse\", \"GSVA\",\n          \"limma\", \"circlize\", \"ComplexHeatmap\", \"jhuanglabRNAseq\")\nfor (pkg in pkgs){\n  suppressPackageStartupMessages(library(pkg, character.only = T))\n}\nproject &lt;- \"mm\"\ndataset &lt;- \"meta\"\nspecies &lt;- \"human\"\nworkdir &lt;- glue(\"~/projects/{project}/analysis/{dataset}/{species}/figures/heatmap\") |&gt; checkdir()\nsetwd(workdir)\nseeds &lt;- 2023\n\ntmp_out_dir &lt;- \"./MMyeloMap/inst/extdata/tmp\" |&gt; checkdir()\nfig_out_dir &lt;- \"./MMyeloMap/inst/extdata/figs\" |&gt; checkdir()\ngene_sets_out_dir &lt;- \"./MMyeloMap/inst/extdata/gene_sets\" |&gt; checkdir()\ntest_data_out_dir &lt;- \"./MMyeloMap/inst/extdata/test_data\" |&gt; checkdir()\n# ------------------ color ----------------------------------\ndf &lt;- \"/cluster/home/jhuang/projects/mm/docs/meta/sampleinfo/sampleinfo_jilin_commpass.rds\" |&gt; read_rds()\ncolor_plate &lt;- c(\n  '1q_gain' = \"#7713a0\", \"CD_no_IgH\" = \"#09e409\", \"CD1\" = \"#129a71\", \"CD2\" = \"#035e03\",\n  \"HRD\" = \"#0e06ee\", \"HRD_1q_gain\" = \"#1E90FF\", \"HRD_chr11\" = \"#5653a5\", \"IgD\"  = \"#FF00FF\",\n  \"Low_purity\" = \"grey60\", \"MAF\" = \"pink\", \"MS\" = \"#ebb415\", \"PR\" = \"#8d0a4f\"\n)\nwrite_rds(color_plate, file = glue(\"{fig_out_dir}/color_plate.rds\"))\n# ------------------------ UMAP -----------------------------------------\nhvg &lt;- readxl::read_xlsx(\"/cluster/home/ztao_jh/projects/mm/analysis/meta/human/figures/heatmap/check_new_cluster_addsamples/ljp/fixed_samples/sampleinfo_0.95.xlsx\", sheet = 2)\nobj &lt;- \"/cluster/home/ztao_jh/projects/mm/analysis/meta/human/figures/heatmap/check_new_cluster_addsamples/ljp/fixed_samples/heatmap_0.95_groups5.rds\" |&gt; read_rds()\n\n# UMAP\numapobj &lt;- uwot::umap(obj$heatmap2[[6]])\npdf(glue(\"{tmp_out_dir}/umap.pdf\"))\numapobj %&gt;%\n  as.data.frame() %&gt;%\n  rownames_to_column(var = \"sample_id\") %&gt;%\n  left_join(df[,c(\"sample_id\", \"subtypes\")]) %&gt;%\n  ggplot(aes(x = V1, y = V2, color = subtypes)) +\n  geom_point() +\n  scale_color_manual(values = color_plate)\ndev.off()\n\nplot:\n\n7.1.3 Dominant Ig subtypes of the refined groups\ncode:\n\npkgs &lt;- c(\"fs\", \"futile.logger\", \"configr\", \"ggpubr\", \"ggthemes\",\n          \"jhtools\", \"glue\", \"ggsci\", \"patchwork\", \"tidyverse\",\n          \"circlize\", \"ComplexHeatmap\", \"GenomicRanges\",\n          \"jhuanglabRNAseq\", \"ggh4x\")\nfor (pkg in pkgs){\n  suppressPackageStartupMessages(library(pkg, character.only = T))\n}\nproject &lt;- \"mm\"\ndataset &lt;- \"meta\"\nspecies &lt;- \"human\"\nworkdir &lt;- glue(\"~/projects/{project}/analysis/{dataset}/{species}/figures/heatmap\") |&gt; checkdir()\nsetwd(workdir)\nseeds &lt;- 2023\n\ndf &lt;- \"/cluster/home/jhuang/projects/mm/docs/meta/sampleinfo/sampleinfo_jilin_commpass.rds\" %&gt;%\n  read_rds\ndf &lt;- df %&gt;%\n  dplyr::select(-irf4_pos) %&gt;%\n  dplyr::distinct() %&gt;%\n  left_join(\n    df %&gt;% dplyr::select(sample_id, irf4_pos) %&gt;%\n      dplyr::distinct() %&gt;%\n      group_by(sample_id) %&gt;%\n      summarise(irf4_pos = paste0(irf4_pos, collapse = \",\"))\n  )\n# ==============================================================================\ncommpass_human_counts &lt;- \"/cluster/home/jhuang/projects/mm/analysis/commpass/human/rnaseq/exp/tables/commpass_human_counts.csv\"%&gt;%\n  read_csv()\ncommpass_human_counts$gene_name[is.na(commpass_human_counts$gene_name)] &lt;- commpass_human_counts$gene_id[is.na(commpass_human_counts$gene_name)]\njilin_human_counts &lt;- \"/cluster/home/jhuang/projects/mm/analysis/jilin/human/rnaseq/exp/tables/jilin_human_counts.csv\" %&gt;%\n  read_csv()\njilin_human_counts$gene_name[is.na(jilin_human_counts$gene_name)] &lt;- jilin_human_counts$gene_id[is.na(jilin_human_counts$gene_name)]\n\ndepth_rna &lt;- tibble(\n  sample_id = c(colnames(commpass_human_counts)[-c(1,2)], colnames(jilin_human_counts)[-c(1,2)]),\n  depth = c(colSums(commpass_human_counts[,-c(1,2)]), colSums(jilin_human_counts[,-c(1,2)]))\n)\n# ==============================================================================\nallfiles &lt;- c(\n  list.files(\"/cluster/home/jhuang/projects/mm/analysis/commpass/human/rnaseq/immune/mixcr/\", pattern = \".clones_IGH.tsv\", full.names = T, recursive = T),\n  list.files(\"/cluster/home/jhuang/projects/mm/analysis/jilin/human/rnaseq/immune/mixcr/\", pattern = \".clones_IGH.tsv\", full.names = T, recursive = T),\n  list.files(\"/cluster/home/jhuang/projects/mm/analysis/commpass/human/rnaseq/immune/mixcr/\", pattern = \".clones_IGK.tsv\", full.names = T, recursive = T),\n  list.files(\"/cluster/home/jhuang/projects/mm/analysis/jilin/human/rnaseq/immune/mixcr/\", pattern = \".clones_IGK.tsv\", full.names = T, recursive = T),\n  list.files(\"/cluster/home/jhuang/projects/mm/analysis/commpass/human/rnaseq/immune/mixcr/\", pattern = \".clones_IGL.tsv\", full.names = T, recursive = T),\n  list.files(\"/cluster/home/jhuang/projects/mm/analysis/jilin/human/rnaseq/immune/mixcr/\", pattern = \".clones_IGL.tsv\", full.names = T, recursive = T))\nalldfes &lt;- read_tsv(allfiles, id = \"pth\")\nalldfes$pth &lt;- basename(alldfes$pth)\nalldfes &lt;- alldfes %&gt;%\n  tidyr::separate_wider_delim(cols = pth, delim = \".\", names = c(\"sample_id\", \"clone\", \"x\")) %&gt;%\n  dplyr::select(-x) %&gt;%\n  mutate(clone = str_remove(clone, pattern = 'clones_')) %&gt;%\n  left_join(depth_rna) %&gt;%\n  mutate(relate_clone_number = readCount/depth * 10^7)\n\nallCHitsWithScore_list &lt;- str_extract_all(alldfes$allCHitsWithScore, pattern = \"IG.+?(?=\\\\*)\")\n\nallCHitsWithScore_list &lt;- parallel::mclapply(allCHitsWithScore_list, function(x){\n  x &lt;- x %&gt;%\n    str_remove(pattern = \"\\\\d$\") %&gt;%\n    unique()\n  x[!x %in% c(\"IGHGP\", \"IGHEP\")]\n}, mc.cores = 10L)\n\nalldfes$raw_igtype &lt;- lapply(allCHitsWithScore_list, function(x){\n  paste0(x %&gt;% sort, collapse = \",\")\n}) %&gt;% unlist()\ntable(alldfes$raw_igtype)\n\nalldfes$igtype &lt;- lapply(allCHitsWithScore_list, function(x){\n  if(length(x) == 0){\n    return(\"others\")\n  }else if(length(x) == 2){\n    return(\"others\")\n  } else if(is.na(x)){\n    return(\"others\")\n  } else {\n    return(x)\n  }\n}) %&gt;% unlist()\n\n\n\n\nse &lt;- \"/cluster/home/jhuang/projects/mm/analysis/meta/human/rnaseq/exp/20250523/jinlin_commpass_se.rds\" %&gt;% read_rds\nigtype_color &lt;- metadata(se)$color$Clinical_IgH\nnames(igtype_color) &lt;- c(\"IGHE\", \"IGHA\", \"IGHD\", \"IGHG\", \"IGHM\", \"others\")\nigtype_color[6] &lt;- \"grey60\"\nigltype_color &lt;- metadata(se)$color$Clinical_IgL\nnames(igltype_color) &lt;- c(\"IGKC\", \"IGLC\", \"xx\", \"others\")\n# ==============================================================================\n\nigtype_number &lt;- alldfes %&gt;%\n  group_by(sample_id, igtype) %&gt;%\n  summarise(relate_clone_number = sum(relate_clone_number)) %&gt;%\n  ungroup() %&gt;%\n  dplyr::filter(sample_id != \"GC8J2\") %&gt;%\n  pivot_wider(id_cols = sample_id, names_from = igtype, values_from = relate_clone_number)\nigtype_number[is.na(igtype_number)] &lt;- 0\n\nS_IGH &lt;- alldfes  %&gt;%\n  dplyr::filter(sample_id != \"GC8J2\") %&gt;%\n  dplyr::filter(clone == \"IGH\") %&gt;%\n  group_by(sample_id) %&gt;%\n  mutate(relate_clone_number_pct = relate_clone_number/sum(relate_clone_number)) %&gt;%\n  summarise(S_IGH = sum(-log(relate_clone_number_pct) * relate_clone_number_pct)) %&gt;%\n  ungroup()\nS_IGL &lt;- alldfes  %&gt;%\n  dplyr::filter(sample_id != \"GC8J2\") %&gt;%\n  dplyr::filter(clone %in% c(\"IGK\", \"IGL\")) %&gt;%\n  group_by(sample_id) %&gt;%\n  mutate(relate_clone_number_pct = relate_clone_number/sum(relate_clone_number)) %&gt;%\n  summarise(S_IGL = sum(-log(relate_clone_number_pct) * relate_clone_number_pct)) %&gt;%\n  ungroup()\n\nEx_IGH &lt;- alldfes  %&gt;%\n  dplyr::filter(sample_id != \"GC8J2\") %&gt;%\n  dplyr::filter(clone == \"IGH\") %&gt;%\n  group_by(sample_id) %&gt;%\n  mutate(relate_clone_number_median = median(relate_clone_number),\n         Ex_IGH = log10(relate_clone_number / relate_clone_number_median),\n         rank = paste0(\"TheIGH_\", dplyr::row_number(-Ex_IGH))) %&gt;%\n  slice_max(order_by = Ex_IGH, n = 3, with_ties = F) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(id_cols = sample_id, names_from = rank, values_from = Ex_IGH)\n\nEx_IGL &lt;- alldfes  %&gt;%\n  dplyr::filter(sample_id != \"GC8J2\") %&gt;%\n  dplyr::filter(clone %in% c(\"IGK\", \"IGL\")) %&gt;%\n  group_by(sample_id) %&gt;%\n  mutate(relate_clone_number_median = median(relate_clone_number),\n         Ex_IGL = log10(relate_clone_number / relate_clone_number_median),\n         rank = paste0(\"TheIGL_\", dplyr::row_number(- Ex_IGL))) %&gt;%\n  slice_max(order_by = Ex_IGL, n = 3, with_ties = F) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(id_cols = sample_id, names_from = rank, values_from = Ex_IGL)\n\n\n\nconfig_fn = \"/cluster/home/jhuang/projects/mm/analysis/jilin/human/rnaseq/configs/colors.yaml\"\nconfig_list &lt;- show_me_the_colors(config_fn, \"all\")\n\nhtobj &lt;- read_rds(glue(\"./paper_check_ht/heatmap/heatmap_0.95_groups29.rds\"))\nhtvalue &lt;- t(htobj$complexheatmap[[6]])\nprimarysamples &lt;- df %&gt;% dplyr::filter(!is.na(PrimaryCluster)) %&gt;% arrange(cluster_order) %&gt;% pull(sample_id)\ndfwen &lt;- df[,c(\"sample_id\", \"RNA_Subtype_Name\",\"PrimaryCluster\", \"detal_20250512\", \"init_subcluster\", \"batch\")]\n\n\nprimarysamples_modelsup_annodf &lt;- tibble(sample_id = primarysamples) %&gt;%\n  left_join(dfwen) %&gt;%\n  left_join(igtype_number) %&gt;%\n  left_join(S_IGH) %&gt;% left_join(S_IGL) %&gt;%\n  left_join(Ex_IGH) %&gt;% left_join(Ex_IGL)\nused_cols &lt;- colnames(primarysamples_modelsup_annodf)[-1]\ncol &lt;- config_list[c(\"PrimaryCluster\", \"RNA_Subtype_Name\")]\ncol$PrimaryCluster &lt;- c(col$PrimaryCluster, \"IgD_like\" = \"#FF00FF\")\n\ninit_subcluster_color &lt;- jhuanglabRNAseq:::inner_group_colors(29)\nnames(init_subcluster_color) &lt;- df$init_subcluster %&gt;% na.omit() %&gt;% unique\ndetal_20250512_color &lt;- jhuanglabRNAseq:::inner_group_colors(22)\nnames(detal_20250512_color) &lt;- df$detal_20250512 %&gt;% na.omit() %&gt;% unique\n\ncol$init_subcluster &lt;- init_subcluster_color\ncol$detal_20250512 &lt;- detal_20250512_color\ncol$batch &lt;- c(\"jilin\" = \"#DC143C\", \"commpass\" = \"grey\")\n\n\nfor(i in used_cols[-c(1,2, 3, 4, 5)]){\n  col[[i]] &lt;- circlize::colorRamp2(breaks = quantile(primarysamples_modelsup_annodf[[i]] %&gt;% na.omit(),\n                                                     c(0.01,0.5,0.99)),\n                                   colors = c(\"#1E90FF\", \"white\", \"#DC143C\" ))\n}\n\n\nha_commpassbasesample_modelsup_annodf &lt;- HeatmapAnnotation(df = primarysamples_modelsup_annodf[used_cols],\n                                                           col = col,border = T,\n                                                           show_legend = used_cols %in% c(\"RNA_Subtype_Name\",\"PrimaryCluster\"))\ncommpassbasesampleht &lt;- htvalue[, primarysamples]\n\norder_tb &lt;- tibble(\n  detal_20250512 = primarysamples_modelsup_annodf$detal_20250512,\n  cod = factor(primarysamples_modelsup_annodf$detal_20250512,\n               levels = unique(primarysamples_modelsup_annodf$detal_20250512))\n)\nht &lt;- Heatmap(commpassbasesampleht,\n              show_row_names = F, show_column_names = F,\n              use_raster = F,\n              show_heatmap_legend = FALSE,\n              row_names_max_width = unit(20, \"cm\"),\n              column_split = order_tb$cod,\n              column_title = unique(order_tb$detal_20250512),\n              cluster_rows = F, cluster_columns = F,\n              column_title_rot = 90,\n              border = T,column_gap = unit(0, \"mm\"), row_gap = unit(0, \"mm\"),\n              top_annotation = ha_commpassbasesample_modelsup_annodf)\npdf(glue(\"{mixcr_figs}/detal_20250512_ht.pdf\"), width = 20, height = 20)\ndraw(ht, annotation_legend_side = \"left\")\ndev.off()\n\nplot:\n\n\nfigure temp 1d.\n\n\n\n\nfigure temp 1d.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Figure 1</span>"
    ]
  },
  {
    "objectID": "fig2.html",
    "href": "fig2.html",
    "title": "\n8  Figure 2\n",
    "section": "",
    "text": "8.1 Figure 2\n(temp content) mutation status of mm driver genes in coMMpass and Jilin datasets",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Figure 2</span>"
    ]
  },
  {
    "objectID": "fig2.html#figure-2",
    "href": "fig2.html#figure-2",
    "title": "\n8  Figure 2\n",
    "section": "",
    "text": "8.1.1 gene mutation frequencies of 3 datasets\ncode:\n\npkgs &lt;- c(\"fs\", \"futile.logger\", \"stringr\", \"jhtools\", \"glue\", \"tidyverse\", \n          \"dplyr\", \"readxl\", \"ggplot2\", \"knitr\")\nfor (pkg in pkgs){\n  suppressPackageStartupMessages(library(pkg, character.only = T))\n}\n\ngenes &lt;- c(\"KRAS\", \"NRAS\", \"DIS3\", \"FAM46C\", \"BRAF\", \"TP53\", \"HUWE1\", \"TRAF3\", \"ATM\", \"EGR1\", \"HIST1H1E\", \"DUSP2\", \"FGFR3\", \n           \"PRKD2\", \"UBR5\", \"CYLD\", \"MAX\", \"IRF4\", \"ZNF292\", \"ACTG1\", \"KLHL6\", \"KMT2C\", \"SP140\", \"ARID1A\", \"CCND1\", \"CREBBP\", \n           \"PTPN11\", \"KMT2B\", \"LTB\", \"ATRX\", \"TRAF2\", \"NF1\", \"EP300\", \"SETD2\", \"TET2\", \"RFTN1\", \"DNMT3A\", \"PRDM1\", \"RB1\", \n           \"SAMHD1\", \"KDM5C\", \"SF3B1\", \"KDM6A\", \"NFKBIA\", \"XBP1\", \"ARID2\", \"NCOR1\", \"RASA2\", \"TGDS\", \"FUBP1\", \"MAF\", \"CDKN1B\", \n           \"MAN2C1\", \"NFKB2\", \"ABCF1\", \"MAML2\", \"CDKN2C\", \"MAFB\", \"C8orf34\", \"ZFP36L1\", \"IDH1\", \"PIK3CA\", \"IDH2\")\n# commpass rnaseq(855 samples) & wgs (892 samples), total 1068------------------\ncommpass_rna_fn &lt;- \"/cluster/home/jhuang/projects/mm/analysis/commpass/human/rnaseq/mutations/commpass/summary/rna_all_mut.tsv\"\ncommpass_rna &lt;- read_tsv(commpass_rna_fn) %&gt;% \n  select(sample_id, Hugo_Symbol, Chromosome, Start_Position, End_Position, Reference_Allele, Tumor_Seq_Allele2, Variant_Classification) %&gt;% distinct()\ncommpass_wgs_fn &lt;- \"/cluster/home/jhuang/projects/mm/analysis/commpass/human/wgs/mutations/summary/commpass/41588_2024_1853_MOESM5_ESM_hg38.txt\"\ncommpass_wgs &lt;- read_tsv(commpass_wgs_fn) %&gt;% \n  select(sample_id, GENE, Chromosome, Start_Position, End_Position, REF, ALT, EFFECT) %&gt;% \n  rename(Hugo_Symbol = GENE, Reference_Allele = REF, Tumor_Seq_Allele2 = ALT, Variant_Classification = EFFECT) %&gt;% \n  mutate(Variant_Classification = str_replace_all(Variant_Classification, c(\"missense_variant\" = \"Missense_Mutation\", \"stop_gained\" = \"Nonsense_Mutation\", \n                                                                            \"frame\" = \"Frame\", \"splice\" = \"Splice\", \"stop\" = \"Stop\", \"start\" = \"Start\")))\nanno &lt;- rbind(commpass_rna, commpass_wgs) %&gt;% \n  select(Chromosome, Start_Position, End_Position, Reference_Allele, Tumor_Seq_Allele2, Variant_Classification) %&gt;% \n  group_by(Chromosome, Start_Position, End_Position, Reference_Allele, Tumor_Seq_Allele2) %&gt;% \n  arrange(Chromosome, Start_Position, End_Position, Reference_Allele, Tumor_Seq_Allele2, Variant_Classification) %&gt;% \n  slice_head(n = 1) %&gt;% ungroup()\n\nmut_fn &lt;- \"/cluster/home/yjliu_jh/projects/mm/output/merged_mutation.tsv\"\ncommpass &lt;- read_tsv(mut_fn) %&gt;% \n  dplyr::filter(grepl(\"MMRF\", sample_id)) %&gt;% distinct() %&gt;% \n  left_join(anno) %&gt;% \n  dplyr::filter(grepl(\"Missense_Mutation|Nonsense_Mutation|Frame|Splice|Stop|Start\", Variant_Classification)) %&gt;% \n  dplyr::filter(Hugo_Symbol %in% genes) %&gt;% \n  select(sample_id, Hugo_Symbol) %&gt;% distinct() %&gt;% \n  group_by(Hugo_Symbol) %&gt;% summarise(mutated_samples = n()) %&gt;%\n  mutate(freq = (mutated_samples/1068)*100, \n         Hugo_Symbol = str_replace_all(Hugo_Symbol, c(\"TENT5C\" = \"FAM46C\", \"H1-4\" = \"HIST1H1E\")))\n\ngenes_absent &lt;- setdiff(genes, commpass$Hugo_Symbol) %&gt;% \n  as.data.frame() %&gt;% \n  rename(Hugo_Symbol = \".\") %&gt;% \n  mutate(mutated_samples = 0, \n         freq = 0)\ncommpass &lt;- rbind(commpass, genes_absent) %&gt;% \n  mutate(Hugo_Symbol = factor(Hugo_Symbol, levels = genes), \n         Dataset = \"Commpass\")\n# jilin (rnaseq 156 samples) & wgs (46 samples), total 156----------------------\njinlin_rna_fn &lt;- \"/cluster/home/jhuang/projects/mm/analysis/jilin/human/rnaseq/mutations/jilin/summary/rna_all_mut.tsv\"\njilin_rna &lt;- read_tsv(jinlin_rna_fn) %&gt;% \n  select(sample_id, Hugo_Symbol, Chromosome, Start_Position, End_Position, Reference_Allele, Tumor_Seq_Allele2, Variant_Classification)\njilin_wgs_fn &lt;- \"/cluster/home/jhuang/projects/mm/analysis/jilin/human/wgs/mutations/summary/wgs_mut.rds\"\njilin_wgs &lt;- read_rds(jilin_wgs_fn) %&gt;% \n  select(sample_id, Hugo_Symbol, Chromosome, Start_Position, End_Position, Reference_Allele, Tumor_Seq_Allele2, Variant_Classification) %&gt;% \n  mutate(sample_id = str_replace(sample_id, \"T$\", \"\"))\nanno_jilin &lt;- rbind(jilin_rna, jilin_wgs) %&gt;% \n  select(Chromosome, Start_Position, End_Position, Reference_Allele, Tumor_Seq_Allele2, Variant_Classification) %&gt;% \n  distinct()\n\njilin &lt;- read_tsv(mut_fn) %&gt;% \n  dplyr::filter(!grepl(\"MMRF\", sample_id)) %&gt;% distinct() %&gt;% \n  left_join(anno_jilin) %&gt;% \n  dplyr::filter(grepl(\"Missense_Mutation|Nonsense_Mutation|Frame|Splice_Site|Stop|Start\", Variant_Classification)) %&gt;% \n  dplyr::filter(Hugo_Symbol %in% genes) %&gt;% \n  select(sample_id, Hugo_Symbol) %&gt;% distinct() %&gt;% \n  group_by(Hugo_Symbol) %&gt;% summarise(mutated_samples = n()) %&gt;%\n  mutate(freq = (mutated_samples/156)*100, \n         Hugo_Symbol = str_replace_all(Hugo_Symbol, c(\"TENT5C\" = \"FAM46C\", \"H1-4\" = \"HIST1H1E\")))\n\ngenes_absent &lt;- setdiff(genes, jilin$Hugo_Symbol) %&gt;% \n  as.data.frame() %&gt;% \n  rename(Hugo_Symbol = \".\") %&gt;% \n  mutate(mutated_samples = 0, \n         freq = 0)\njilin &lt;- rbind(jilin, genes_absent) %&gt;% \n  mutate(Hugo_Symbol = factor(Hugo_Symbol, levels = genes), \n         Dataset = \"Jilin\")\n# blood rnaseq, 1273 samples----------------------------------------------------\nmetadata &lt;- read_excel(\"blood/blood840132-suppl2.xlsx\", sheet = \"Data\")\nblood_rna_fn &lt;- \"blood/mutsiginput.txt\"\nblood &lt;- read_tsv(blood_rna_fn) %&gt;% \n  rename(sample_id = Tumor_Sample_Barcode) %&gt;% \n  dplyr::filter(sample_id %in% metadata$FullName, \n                grepl(\"Missense_Mutation|Nonsense_Mutation|Frame|Splice_Site|Stop|Start\", Variant_Classification)) %&gt;% \n  dplyr::filter(Hugo_Symbol %in% genes) %&gt;% \n  select(sample_id, Hugo_Symbol) %&gt;% distinct() %&gt;% \n  group_by(Hugo_Symbol) %&gt;% summarise(mutated_samples = n()) %&gt;%\n  mutate(freq = (mutated_samples/1273)*100)\n\ngenes_absent &lt;- setdiff(genes, blood$Hugo_Symbol) %&gt;% \n  as.data.frame() %&gt;% \n  rename(Hugo_Symbol = \".\") %&gt;% \n  mutate(mutated_samples = 0, \n         freq = 0)\nblood &lt;- rbind(blood, genes_absent) %&gt;% \n  mutate(Hugo_Symbol = factor(Hugo_Symbol, levels = genes), \n         Dataset = \"Blood\")\nwrite_tsv(blood, \"rnaseq_driverGenes_blood_freq.txt\")\n\npdf(\"rnaseq_driverGenes_blood_barplot.pdf\", width = 15, height = 5)\nggplot(blood, aes(x = Hugo_Symbol, y = freq)) +\n  geom_col(fill = \"#69b3a2\", width = 0.7) +  \n  labs(title = \"Driver gene frequencies in blood dataset (N = 1273)\",\n       x = \"Gene\",\n       y = \"Percentage of samples (%)\") +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    axis.title = element_text(size = 12),\n    axis.text = element_text(size = 11),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1), \n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.y = element_blank()\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))\ndev.off()\n\n#------------------------------plot---------------------------------------------\n\n# jilin & blood & commpass\nall_freq &lt;- rbind(jilin, blood, commpass)\n\npdf(\"rna.wgs_driverGenes_jilin.blood.commpass.lyj_barplot.pdf\", width = 15, height = 5)\nggplot(all_freq, aes(x = Hugo_Symbol, y = freq, fill = Dataset)) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.8), width = 0.7) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(title = \"Driver gene frequencies in Blood/Commpass/Jilin RNAseq/WGS dataset (N = 1273/1068/156)\",\n       x = \"Gene\",\n       y = \"Percentage of samples (%)\",\n       fill = \"Dataset\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),\n    panel.grid.major.x = element_blank(),\n    legend.position = \"top\"\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))\ndev.off()\n\nplot:\n\n8.1.2 gene mutation comparisons among different populations\ncode:\n\ncommpass_wgs_fn &lt;- \"/cluster/home/jhuang/projects/mm/analysis/commpass/human/wgs/mutations/summary/commpass/41588_2024_1853_MOESM5_ESM_hg38.txt\"\ncommpass_wgs &lt;- read_tsv(commpass_wgs_fn) %&gt;%\n  select(sample_id, GENE, Chromosome, Start_Position, End_Position, REF, ALT, EFFECT) %&gt;%\n  rename(Hugo_Symbol = GENE, Reference_Allele = REF, Tumor_Seq_Allele2 = ALT, Variant_Classification = EFFECT) %&gt;%\n  mutate(Variant_Classification = str_replace_all(Variant_Classification, c(\"missense_variant\" = \"Missense_Mutation\", \"stop_gained\" = \"Nonsense_Mutation\",\n                                                                            \"frame\" = \"Frame\", \"splice\" = \"Splice\", \"stop\" = \"Stop\", \"start\" = \"Start\")))\ncommpass_wgs_mut &lt;- commpass_wgs %&gt;% \n  dplyr::filter(grepl(\"Missense_Mutation|Nonsense_Mutation|Frame\", Variant_Classification)) %&gt;% \n  select(sample_id, Hugo_Symbol) %&gt;% distinct() %&gt;%\n  group_by(Hugo_Symbol) %&gt;% summarise(mutated_samples = n()) %&gt;%\n  mutate(freq = (mutated_samples/892)*100)\n  \n# jilin-------------------------------------------------------------------------\njilin_mut_fn &lt;- \"/cluster/home/wyye_jh/projects/ngs/analysis/mm/human/rnaseq/jilin_filfs_integrated.rds\"\njilin_mut &lt;- read_rds(jilin_mut_fn) %&gt;% \n  select(sample_id, Hugo_Symbol, Chromosome, Start_Position, End_Position, Reference_Allele, Tumor_Seq_Allele2, Variant_Classification) %&gt;% \n  #semi_join(commpass_wgs, by = c(\"Hugo_Symbol\", \"Chromosome\", \"Start_Position\", \"End_Position\", \"Reference_Allele\")) %&gt;% \n  distinct() %&gt;% \n  dplyr::filter(grepl(\"Missense_Mutation|Nonsense_Mutation|Frame\", Variant_Classification)) %&gt;% \n  select(sample_id, Hugo_Symbol) %&gt;% distinct() %&gt;%\n  group_by(Hugo_Symbol) %&gt;% summarise(mutated_samples = n()) %&gt;%\n  mutate(freq = (mutated_samples/156)*100)\n\n\ngene_freq &lt;- jilin_mut %&gt;% \n  left_join(commpass_wgs_mut, by = \"Hugo_Symbol\", suffix = c(\".jilin\", \".cmps\")) %&gt;% \n  dplyr::filter(!is.na(freq.cmps)) %&gt;% \n  dplyr::filter(Hugo_Symbol %in% genes) %&gt;% \n  mutate(fold = freq.jilin/freq.cmps) %&gt;% \n  arrange(desc(freq.jilin))\n\n# plot--------------------------------------------------------------------------\npdf(\"jilin.filfs_cmps.wgs_geneFreq.pdf\")\ngene_freq &lt;- gene_freq %&gt;% arrange(freq.jilin)\nmax_freq &lt;- max(c(gene_freq$freq.jilin, gene_freq$freq.cmps)) %&gt;% round(digits = 0)\npar(mar = c(5, 8, 4, 8) + 0.1)\nbarplot(gene_freq$freq.jilin, names.arg = gene_freq$Hugo_Symbol,\n        horiz = TRUE, col = \"#4e70bc\", border = NA, \n        xlim = c(-max_freq, max_freq),\n        las = 1,         \n        main = \"Alteration frequency (%)\",\n        cex.names = 0.5,\n        xlab = \"\",       \n        axes = FALSE)    \n\nbarplot(-gene_freq$freq.cmps, \n        horiz = TRUE, col = \"#ae2318\", border = NA, \n        axes = FALSE, add = TRUE)\n\naxis(1, at = seq(-max_freq, max_freq, length.out = 5),\n     labels = abs(seq(-max_freq, max_freq, length.out = 5)))\nmtext(\"Commpass.wgs\", side = 1, line = 3, at = -max_freq/2)\nmtext(\"Jilin\", side = 1, line = 3, at = max_freq/2)\n\ndev.off()\n\nplot:",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Figure 2</span>"
    ]
  },
  {
    "objectID": "fig3.html",
    "href": "fig3.html",
    "title": "\n9  Figure 3\n",
    "section": "",
    "text": "9.1 Figure 3",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Figure 3</span>"
    ]
  },
  {
    "objectID": "fig3.html#figure-3",
    "href": "fig3.html#figure-3",
    "title": "\n9  Figure 3\n",
    "section": "",
    "text": "9.1.1 Functional relavances of samples in the IgD-enriched subtype\ncode:\n\npkgs &lt;- c(\"GSVA\", \"fs\", \"futile.logger\", \"configr\", \"stringr\", \"ggpubr\", \n          \"jhtools\", \"glue\", \"ggsci\", \"patchwork\", \"tidyverse\", \"dplyr\", \n          \"SummarizedExperiment\", \"jhuanglabRNAseq\", \"DESeq2\", \"maftools\", \n          \"matrixStats\", \"Matrix\", \"furrr\", \"ComplexHeatmap\", \"rstatix\",\n          \"clusterProfiler\", \"DOSE\", \"enrichplot\", \"org.Hs.eg.db\", \n          \"ggthemes\", \"EnhancedVolcano\", \"GseaVis\", \"glmnet\", \"tidyplots\")\nfor (pkg in pkgs){\n  suppressPackageStartupMessages(library(pkg, character.only = T))\n} \n\n# set workdir\nsetwd(\"/cluster/home/yjliu_jh/projects/mm/analysis/meta/human/figures/heatmap/check_new_cluster_addsamples/fixed_check\")\n\n# get samples\nclusterings &lt;- readxl::read_excel(\"/cluster/home/jhuang/projects/mm/analysis/meta/human/figures/heatmap/eda/check_new_cluster_addsamples/fixed_samples_3/sampleinfo_0.95.xlsx\")\ncolnames(clusterings)[1] &lt;- \"sample_id\"\n\n# get exp data\nmm1330 &lt;- read_rds(\"~/projects/mm/analysis/meta/human/rnaseq/exp/mm1330.rds\") %&gt;% convert_df_plot()\n\n# get rna sequencing type\npred_rna_lib &lt;- function (dat_mat) {\n  his_genes1 &lt;- c(\"H4C11\", \"H2BC3\", \"H4C4\", \"H3C12\", \"H2BC14\", \n                  \"H4C6\", \"H2AC16\", \"H2AC11\", \"H2AC12\", \"H1−5\", \"H3C2\", \n                  \"H3C3\", \"H3C11\", \"H2AC17\", \"H2AC13\", \"H2BC13\", \"H2AC4\", \n                  \"H2AC14\", \"H4C9\", \"H4C1\", \"H4C2\", \"H4C13\", \"H3C7\", \"H2BC9\", \n                  \"H2BC10\", \"H3C8\", \"H3C13\", \"H2BC7\", \"H2BC18\", \"H2BC15\", \n                  \"H4C14\", \"H4C8\", \"H2BC17\", \"H3C10\", \"H2BC11\", \"H4C12\", \n                  \"H3C15\", \"H2BC8\", \"H2AC8\", \"H2BC6\", \"H4C5\", \"H2AC15\", \n                  \"H1−3\", \"H3C4\", \"H4−16\", \"H2AC20\", \"H2AC21\", \"H3C1\", \n                  \"H2BC5\", \"H1−4\", \"H2AC7\", \"H2BC4\", \"H1−2\", \"H2AC6\")\n  inter_genes &lt;- intersect(his_genes1, rownames(dat_mat))\n  stopifnot(\"please make sure histone genes is contained in the data\" = length(inter_genes) &gt; 0)\n  dat_mat &lt;- dat_mat[rownames(dat_mat) %in% inter_genes, ]\n  clust &lt;- data.frame(cluster = cutree(hclust(dist(t(dat_mat))), k = 2))\n  diff &lt;- mean(unlist(dat_mat[, clust$cluster %in% 1])) - mean(unlist(dat_mat[, clust$cluster %in% 2]))\n  clust$rna_type &lt;- \"mRNA\"\n  clust$rna_type[clust$cluster == (2 - sum(diff &gt; 0))] &lt;- \"total_RNA\"\n  new_dat &lt;- data.frame(sample_id = rownames(clust), rna_type = clust$rna_type)\n  return(new_dat)\n}\nrna_lib_part &lt;- pred_rna_lib(mm1330)\n\n# get count\nmmdatasets &lt;- c(\"jilin\", \"commpass\", \"public\")\ncount_files &lt;- glue::glue(\"/cluster/home/jhuang/projects/mm/analysis/{mmdatasets}/human/rnaseq/exp/tables/{mmdatasets}_human_counts.csv\")\ntotal_counts_list &lt;- lapply(count_files[file.exists(count_files)], read_csv)\nnames &lt;- mmdatasets[file.exists(count_files)]\ncounts_all &lt;- total_counts_list[[1]]\nfor (i in 2:length(total_counts_list)) {\n  counts_all &lt;- bind_cols(counts_all, total_counts_list[[i]][, -(1:2)])\n}\n\n# load new gene symbol info \nhugo_anno &lt;- readr::read_delim(\"/cluster/home/yjliu_jh/projects/mm/data/hgnc_complete_set.txt\",\n                               col_types = cols(intermediate_filament_db = col_character()))\nhugo_anno &lt;- hugo_anno[, c(\"symbol\", \"ensembl_gene_id\", \"locus_group\")] %&gt;% as.data.frame() \ncolnames(hugo_anno)[2] &lt;- \"gene_id\"\n\n# prepare counts data\ncounts_all &lt;- counts_all[, -2] %&gt;% left_join(hugo_anno) %&gt;% na.omit() %&gt;% \n  dplyr::select(-c(gene_id, locus_group)) %&gt;% as.data.frame() %&gt;% remove_rownames() %&gt;% \n  column_to_rownames(var = \"symbol\") %&gt;% as.matrix() %&gt;% round()\ncounts_part &lt;- counts_all[, intersect(clusterings$sample_id, colnames(counts_all))]\n\n# prepare anno data\nsinfo_part &lt;- data.frame(sample_id = colnames(counts_part))\nsinfo_part &lt;- left_join(sinfo_part, clusterings[, c(\"sample_id\", \"sub_groups\")])\nsinfo_part &lt;- left_join(sinfo_part, rna_lib_part)\nmerged_sinfo &lt;- read_rds(\"~/projects/mm/docs/meta/sampleinfo/sampleinfo_jilin_commpass.rds\")\nsinfo_part &lt;- left_join(sinfo_part, merged_sinfo[, c(\"sample_id\", \"batch\")])\nrownames(sinfo_part) &lt;- sinfo_part$sample_id\nsinfo_part$group &lt;- ifelse(sinfo_part$sub_groups %in% \"G3\", \"igd_like\", \"others\")\n\n# construct DESeq2 object\ndds &lt;- DESeqDataSetFromMatrix(counts_part, sinfo_part, ~ batch + rna_type + group)\nkeep &lt;- rowSums(counts(dds) &gt;= 5) &gt; ceiling(0.2 * ncol(dds))  \ndds &lt;- dds[keep, ]\nkeep2 &lt;- rowSums(counts(dds) == 0) &lt; ceiling(0.5 * ncol(dds))\ndds &lt;- dds[keep2, ]\ndds &lt;- DESeq(dds)\nreadr::write_rds(dds, \"dds_corrected.rds\")\n\n# order and add columns to the results\nadd_col &lt;- function(data){\n  data$gene_name &lt;- rownames(data)\n  data$absFC &lt;- abs(data$log2FoldChange)\n  data &lt;- data[order(data$pvalue), ]\n  data2 &lt;- left_join(as.data.frame(data), hugo_anno[, c(\"symbol\", \"gene_id\")], by = c(\"gene_name\" = \"symbol\"))\n  data$ensembl_id &lt;- data2$gene_id\n  data\n}\n\n# get result for  comparison\nres_igd &lt;- add_col(results(dds, c(\"group\", \"igd_like\", \"others\")))\nGSEAInput_i &lt;- data.frame(rownames(res_igd), res_igd$log2FoldChange)\ncolnames(GSEAInput_i) &lt;- c(\"Symbol\", \"logFC\")\nGSEA2 &lt;- GSEAInput_i$logFC\nnames(GSEA2) &lt;- as.character(GSEAInput_i$Symbol)\nGSEA2 &lt;- sort(GSEA2, decreasing = TRUE)\ngseGO_res_i &lt;- gseGO(GSEA2, OrgDb = org.Hs.eg.db, keyType = \"SYMBOL\", ont = \"BP\",\n                     minGSSize = 5, maxGSSize = 1000, pvalueCutoff = 0.2)\n\n# volcano function\nquick_volcano &lt;- function (resA, title, col = \"gene_name\", fc_cutoff = 2, sel_lab = NULL) {\n  if (is.null(sel_lab)) {\n    sel_lab &lt;- unique(c(resA[order(resA$padj), ][1:10, col],\n                        resA[order(resA$absFC, decreasing = T), ][1:10, col]))\n  }\n  p &lt;- EnhancedVolcano(resA, lab = resA[[col]],\n                       title = title, subtitle = NULL, caption = NULL,\n                       legendPosition = \"none\", \n                       selectLab = sel_lab,\n                       drawConnectors = TRUE, widthConnectors = 0.3,\n                       x = 'log2FoldChange', y = 'pvalue',\n                       pCutoff = 0.05, FCcutoff = fc_cutoff,\n                       gridlines.major = FALSE,\n                       gridlines.minor = FALSE)\n  p\n} \nvolcano_p &lt;- quick_volcano(as.data.frame(res_igd), \"IgD group vs others\")\nggsave(\"volcano_igd_comparison_altered.pdf\", volcano_p, dpi = 300, width = 6, height = 6, units = \"in\")\n\nplot:\ncode:\n\n# gsea result\npdf(\"igd_comparison_gsea.pdf\", width = 12, height = 9)\nprint(dotplot(gseGO_res_i, showCategory = 9, split = \".sign\", orderBy = \"p.adjust\") + facet_grid(.~.sign))\ndev.off()\n\nplot:",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Figure 3</span>"
    ]
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "10  Frequently Asked Questions",
    "section": "",
    "text": "Frequently Asked Questions",
    "crumbs": [
      "Communication",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>FAQ</span>"
    ]
  },
  {
    "objectID": "contactus.html",
    "href": "contactus.html",
    "title": "11  Contact us",
    "section": "",
    "text": "We welcome inquiries and collaboration to maximize the impact of our research. To ensure your questions are directed to the most appropriate team member, please use the following contact guidelines:\n\nClinical Questions: For inquiries related to clinical implications, diagnostic applications, or patient management, please contact Prof. Fengyan Jin.\nWet Lab and Experimental Questions: For questions about sample preparation, library preparation, functional assays, or other experimental methodologies, please reach out to Prof. Yun Dai.\nBioinformatics and Computational Questions: For assistance with bioinformatics troubleshooting, methodology, or replicating our analytical pipelines, please contact me directly at hiekeen@gmail.com.\n\nGeneral Inquiries or Collaborative Opportunities: For all other questions, including data access, interdisciplinary collaborations, or feedback on the project, we encourage you to email Prof. Fengyan Jin, Prof. Yun Dai, and me collectively. We are deeply invested in enabling others to explore and build upon this dataset.",
    "crumbs": [
      "Communication",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Contact us</span>"
    ]
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "12  Functions",
    "section": "",
    "text": "To summarize the features embedded in the large-scale transcriptomic dataset generated in this study and to facilitate downstream application by other researchers, we trained multiple predictive models using various algorithms, built upon the dataset presented herein. To evaluate model performance and guide the selection of optimal classifiers for robust subtype prediction, a set of external, independent samples was integrated with our cohort and annotated using the same analytical pipeline. These external samples were also used as model input. By comparing the model predictions with the results obtained from the standard analytical pipeline, we identified the optimal model, which achieved a high accuracy.\nSubsequently, in conjunction with the findings of this study, we developed a suite of methods for molecular characterization of multiple myeloma (MM) samples and implemented them in an R package (MMyeloMap) designed to enable comprehensive single-sample prediction. This tool takes transcript quantification results generated by the Salmon pipeline as input and optionally produces a comprehensive web-based report. The framework integrates multiple predictive models trained on multiple cohorts (see Methods), and provides an overall subtype assignment for the queried sample. The output includes figures illustrating transcriptomic clustering characteristics, dimensionality reduction visualizations, and other relevant features. When raw FASTQ files are used as input, the tool can also infer the patient’s immunoglobulin (Ig) isotype and identify potential driver alterations.\nPlease check https://github.com/JhuangLab/MMyeloMap/ and https://jhuanglab.github.io/MMyeloMap for the details.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "acknowledgement.html#note",
    "href": "acknowledgement.html#note",
    "title": "13  Acknowledgement",
    "section": "13.1 Note",
    "text": "13.1 Note\nWe get some colors setting from: https://zhuanlan.zhihu.com/p/693124785.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Acknowledgement</span>"
    ]
  },
  {
    "objectID": "final.html",
    "href": "final.html",
    "title": "14  Final Words",
    "section": "",
    "text": "We are deeply grateful for your patience and continued interest as we advance this research on molecular subtyping of multiple myeloma in Chinese patients. This project is an ongoing journey, and we are actively working to refine our analyses, enhance the reproducibility of our computational methods, and uncover new insights into the molecular mechanisms driving this disease. In the coming phases, we plan to share expanded datasets, updated bioinformatics workflows, and novel findings that further elucidate population-specific genetic alterations and their therapeutic implications. These efforts aim to empower clinicians with actionable tools for personalized care, provide bioinformatics specialists with robust, replicable pipelines, and offer oncogenesis researchers deeper mechanistic understanding. Your engagement and feedback are invaluable as we strive to bridge clinical practice, computational science, and oncology research. Stay tuned for updates, and thank you for being part of this collaborative endeavor to improve diagnosis, treatment, and outcomes for multiple myeloma in Chinese and Asian populations.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Final Words</span>"
    ]
  }
]